<<<<< INCLUSÃO DAS BIBLIOTECAS <<<<<

#include <Wire.h>
#include <Adafruit_Sensor.h>
#include "Adafruit_TSL2591.h"
#include <ezButton.h>

<<<<< BOTÃO <<<<<

ezButton button(7);  //create ezButton object that attach to pin 7;

<<<<< CRIAÇÃO DO SENSOR <<<<<

Adafruit_TSL2591 tsl = Adafruit_TSL2591(2591); // pass in a number for the sensor identifier (for your use later)

void displaySensorDetails(void)
{
  sensor_t sensor;
  tsl.getSensor(&sensor);
  delay(500);
}

void configureSensor(void)
{
  // You can change the gain on the fly, to adapt to brighter/dimmer light situations
  //tsl.setGain(TSL2591_GAIN_LOW);    // 1x gain (bright light)
  tsl.setGain(TSL2591_GAIN_MED);      // 25x gain
  //tsl.setGain(TSL2591_GAIN_HIGH);   // 428x gain
  
  // Changing the integration time gives you a longer time over which to sense light
  // longer timelines are slower, but are good in very low light situtations!
  //tsl.setTiming(TSL2591_INTEGRATIONTIME_100MS);  // shortest integration time (bright light)
  // tsl.setTiming(TSL2591_INTEGRATIONTIME_200MS);
  tsl.setTiming(TSL2591_INTEGRATIONTIME_300MS);
  // tsl.setTiming(TSL2591_INTEGRATIONTIME_400MS);
  // tsl.setTiming(TSL2591_INTEGRATIONTIME_500MS);
  // tsl.setTiming(TSL2591_INTEGRATIONTIME_600MS);  // longest integration time (dim light)

  /* Display the gain and integration time for reference sake */  
  Serial.println(F("------------------------------------"));
  Serial.print  (F("Gain:         "));
  tsl2591Gain_t gain = tsl.getGain();
  switch(gain)
  {
    case TSL2591_GAIN_LOW:
      Serial.println(F("1x (Low)"));
      break;
    case TSL2591_GAIN_MED:
      Serial.println(F("25x (Medium)"));
      break;
    case TSL2591_GAIN_HIGH:
      Serial.println(F("428x (High)"));
      break;
    case TSL2591_GAIN_MAX:
      Serial.println(F("9876x (Max)"));
      break;
  }
  Serial.print  (F("Timing:       "));
  Serial.print((tsl.getTiming() + 1) * 100, DEC); 
  Serial.println(F(" ms"));
  Serial.println(F("------------------------------------"));
  Serial.println(F(""));
}

void setup(void) 
{
  Serial.begin(9600);
  
  Serial.println(F("Starting Adafruit TSL2591 Test!"));
  
  if (tsl.begin()) 
  {
    Serial.println(F("Found a TSL2591 sensor"));
  } 
  else 
  {
    Serial.println(F("No sensor found ... check your wiring?"));
    while (1);
  }
    
  /* Display some basic information on this sensor */
  displaySensorDetails();
  
  /* Configure the sensor */
  configureSensor();

  // Now we're ready to get readings ... move on to loop()!
  
   for (int i = 0; i < numReads; i++){
    //simpleRead(); 
    advancedRead();
    // unifiedSensorAPIRead();
    sum += lux;
  }

   average1 = sum/(numReads);
   Serial.print(" Orange Blank Average I0 = "); Serial.print(average1);
  
}

void simpleRead(void)
{
  // Simple data read example. Just read the infrared, fullspecrtrum diode 
  // or 'visible' (difference between the two) channels.
  // This can take 100-600 milliseconds! Uncomment whichever of the following you want to read
  uint16_t x = tsl.getLuminosity(TSL2591_VISIBLE);
  //uint16_t x = tsl.getLuminosity(TSL2591_FULLSPECTRUM);
  //uint16_t x = tsl.getLuminosity(TSL2591_INFRARED);

  Serial.print(F("[ ")); Serial.print(millis()); Serial.print(F(" ms ] "));
  Serial.print(F("Luminosity: "));
  Serial.println(x, DEC);
}

void advancedRead(void)
{
  // More advanced data read example. Read 32 bits with top 16 bits IR, bottom 16 bits full spectrum
  // That way you can do whatever math and comparisons you want!
  uint32_t lum = tsl.getFullLuminosity();
  uint16_t ir, full;
  ir = lum >> 16;
  full = lum & 0xFFFF;

  float lux = (tsl.calculateLux(full,ir));
  Serial.print(F("Lux:"));  Serial.println(lux,6);
  
  //Serial.print(F("[ ")); Serial.print(millis()); Serial.print(F(" ms ] "));
  //Serial.print(F("IR: ")); Serial.print(ir);  Serial.print(F("  "));
  //Serial.print(F("Full: ")); Serial.print(full); Serial.print(F("  "));
  //Serial.print(F("Visible: ")); Serial.print(full - ir); Serial.print(F("  "));
  //Serial.print(F("Lux: ")); Serial.println(tsl.calculateLux(full, ir), 6);
  //Serial.print(F("Lux: ")); Serial.println(tsl.calculateLux(full, ir), 6);
}

void unifiedSensorAPIRead(void)
{
  /* Get a new sensor event */ 
  sensors_event_t event;
  tsl.getEvent(&event);
 
  /* Display the results (light is measured in lux) */
  Serial.print(F("[ ")); Serial.print(event.timestamp); Serial.print(F(" ms ] "));
  if ((event.light == 0) |
      (event.light > 4294966000.0) | 
      (event.light <-4294966000.0))
  {
    /* If event.light = 0 lux the sensor is probably saturated */
    /* and no reliable data could be generated! */
    /* if event.light is +/- 4294967040 there was a float over/underflow */
    Serial.println(F("Invalid data (adjust gain or timing)"));
  }
  else
  {
    Serial.print(event.light); Serial.println(F(" lux"));
  }
}

<<<<< VARIÁVEIS DECLARADAS <<<<<

int numReads = 10;
int cont;
float sum;
float average1;
float average2;
float average3;
float conc;

int pinoLED = 13; //PINO DIGITAL UTILIZADO PELO LED

int val;

<<<<< REGRESSÃO LINEAR <<<<<

//EXEMPLO - http://en.wikipedia.org/wiki/Simple_linear_regression
float x[11] = {0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1};
float y[11] = {0, 0.95, 0.85, 0.76, 0.71, 0.65, 0.52, 0.43, 0.32, 0.22, 0.11};
float lrCoef[2] = {0, 0};

float sum_x = 0;
float sum_y = 0;
float sum_xy = 0;
float sum_xx = 0;

<<<<< CÓDIGO INICIO BOTÃO E LED <<<<<

void setup() {
  Serial.begin(9600);
  while(!Serial);
  button.setDebounceTime(50); //set debounce time to 50 milliseconds

  pinMode(pinoLED, OUTPUT); //DEFINE O PINO COMO SAÍDA
  digitalWrite(13, HIGH);

  delay (10);

<<<<< MEDIR O BRANCO AO PRESSIONAR O BOTÃO <<<<<

  //PRIMEIRA PARTE DO CÓDIGO
  do {
    button.loop();
  } while (!button.isPressed());
  Serial.println("MEASURING THE BLANK VALUE ...");
  Serial.println();

<<<<< SENSOR <<<<<

<<<<< SENSOR - LEITURA DAS MEDIDAS <<<<<

  do {
  // More advanced data read example. Read 32 bits with top 16 bits IR, bottom 16 bits full spectrum
  // That way you can do whatever math and comparisons you want!
  uint32_t lum = tsl.getFullLuminosity();
  uint16_t ir, full;
  ir = lum >> 16;
  full = lum & 0xFFFF;

  float lux = (tsl.calculateLux(full,ir));

   for (int i = 0; i < numReads; i++){
    sum += sensorValues[AS726x_ORANGE];
   }
  
  //Serial.print(F("[ ")); Serial.print(millis()); Serial.print(F(" ms ] "));
  //Serial.print(F("IR: ")); Serial.print(ir);  Serial.print(F("  "));
  //Serial.print(F("Full: ")); Serial.print(full); Serial.print(F("  "));
  //Serial.print(F("Visible: ")); Serial.print(full - ir); Serial.print(F("  "));
  //Serial.print(F("Lux: ")); Serial.println(tsl.calculateLux(full, ir), 6);
  //Serial.print(F("Lux: ")); Serial.println(tsl.calculateLux(full, ir), 6);
    Serial.print(F("Lux:"));  Serial.println(lux,6);
   cont++;
  } while(cont < numReads); 
  
<<<<< SENSOR LÊ 10 MEDIDAS, PRINTA NA TELA E FAZ A MÉDIA <<<<<

   average1 = sum/(numReads*numReads);
   Serial.print(" Orange Blank Average I0 = "); Serial.print(average1);
   cont = 0;
   sum = 0;

<<<<< SUBSTITUI O VALOR NO VETOR E FAZ OS CÁLCULOS PARA A ABSORBÂNCIA <<<<<

 y[0] = average1;
 float y0 = y[0];
 for(int j = 0; j < 11; j++){
  y[j] = -log10(y[j]/y0);
 }

<<<<< PRINT DA REGRESSÃO LINEAR <<<<<

 //CHAMA O ALGORITMO DE REGRESSÃO LINEAR
 simpLinReg(x, y, lrCoef, 11);
 Serial.println("");
 Serial.print(" Abs = ");
 Serial.print(lrCoef[0], 4);

 if (lrCoef[1] > 0){
  Serial.print("*Conc + ");
 }
 else{
  Serial.print("*Conc ");
 }
 
 Serial.println(lrCoef[1], 4);

<<<<< MEDIR O VALOR ANTES DE BORBULHAR COM OZONIO AO PRESSIONAR O BOTÃO <<<<< 

  do {
    button.loop();
  } while (!button.isReleased());
  Serial.println();
  Serial.println("PRESS THE BUTTON AGAIN TO MEASURE THE LIGHT VALUE BEFORE BUBBLING WITH OZONE ...");
  Serial.println();
  
<<<<< SENSOR <<<<<

  //SEGUNDA PARTE DO CÓDIGO
  do {
    button.loop();
  } while (!button.isPressed());

  //begin and make sure we can talk to the sensor
  if(!ams.begin()){
    Serial.println("could not connect to sensor! Please check your wiring.");
    while(1);
  }

<<<<< SENSOR - LEITURA DAS MEDIDAS <<<<<

  do {
   //read the device temperature
   uint8_t temp = ams.readTemperature();
  
   //ams.drvOn(); //uncomment this if you want to use the driver LED for readings
   ams.startMeasurement(); //begin a measurement
  
   //wait till data is available
   bool rdy = false;
   while(!rdy){
     delay(1000);
     rdy = ams.dataReady();
   }
   //ams.drvOff(); //uncomment this if you want to use the driver LED for readings

   //read the values
   ams.readRawValues(sensorValues);
   //ams.readCalibratedValues(calibratedValues);

<<<<< SENSOR LÊ 10 MEDIDAS, PRINTA NA TELA E FAZ A MÉDIA <<<<<

   for (int l = 0; l < numReads; l++){
    sum += sensorValues[AS726x_ORANGE];
   }

   Serial.print(" Temp: "); Serial.print(temp);
   //Serial.print(" Violet: "); Serial.print(sensorValues[AS726x_VIOLET]);
   //Serial.print(" Blue: "); Serial.print(sensorValues[AS726x_BLUE]);
   //Serial.print(" Green: "); Serial.print(sensorValues[AS726x_GREEN]);
   //Serial.print(" Yellow: "); Serial.print(sensorValues[AS726x_YELLOW]);
   Serial.print(" Orange: "); Serial.print(sensorValues[AS726x_ORANGE]);
   //Serial.print(" Red: "); Serial.print(sensorValues[AS726x_RED]);
   Serial.println();
   Serial.println();
   cont++;
  } while(cont < numReads); 

   average2 = sum/(numReads*numReads);
   Serial.print(" Orange Light Average Before Bubbling = "); Serial.print(average2);  
   Serial.println();
   cont = 0;
   sum = 0;

<<<<< MEDIR O VALOR DEPOIS DE BORBULHAR COM OZONIO AO PRESSIONAR O BOTÃO <<<<< 

  do {
    button.loop();
  } while (!button.isReleased());
  Serial.println();
  Serial.println("PRESS THE BUTTON AGAIN TO MEASURE THE LIGHT VALUE AFTER BUBBLING WITH OZONE ...");
  Serial.println();

<<<<< SENSOR <<<<<

  //TERCEIRA PARTE DO CÓDIGO
  do {
    button.loop();
  } while (!button.isPressed());

  //begin and make sure we can talk to the sensor
  if(!ams.begin()){
    Serial.println("could not connect to sensor! Please check your wiring.");
    while(1);
  }

<<<<< SENSOR - LEITURA DAS MEDIDAS <<<<<

  do {
   //read the device temperature
   uint8_t temp = ams.readTemperature();
  
   //ams.drvOn(); //uncomment this if you want to use the driver LED for readings
   ams.startMeasurement(); //begin a measurement
  
   //wait till data is available
   bool rdy = false;
   while(!rdy){
     delay(1000);
     rdy = ams.dataReady();
   }
   //ams.drvOff(); //uncomment this if you want to use the driver LED for readings

   //read the values
   ams.readRawValues(sensorValues);
   //ams.readCalibratedValues(calibratedValues);

<<<<< SENSOR LÊ 10 MEDIDAS, PRINTA NA TELA E FAZ A MÉDIA <<<<<

   for (int l = 0; l < numReads; l++){
    sum += sensorValues[AS726x_ORANGE];
   }

   Serial.print(" Temp: "); Serial.print(temp);
   //Serial.print(" Violet: "); Serial.print(sensorValues[AS726x_VIOLET]);
   //Serial.print(" Blue: "); Serial.print(sensorValues[AS726x_BLUE]);
   //Serial.print(" Green: "); Serial.print(sensorValues[AS726x_GREEN]);
   //Serial.print(" Yellow: "); Serial.print(sensorValues[AS726x_YELLOW]);
   Serial.print(" Orange: "); Serial.print(sensorValues[AS726x_ORANGE]);
   //Serial.print(" Red: "); Serial.print(sensorValues[AS726x_RED]);
   Serial.println();
   Serial.println();
   cont++;
  } while(cont < numReads); 

   average3 = sum/(numReads*numReads);
   Serial.print(" Orange Light Average After Bubbling = "); Serial.print(average3);  
   Serial.println();
   cont = 0;
   sum = 0;

<<<<< CÁLCULOS PARA OBTER A CONCENTRAÇÃO <<<<<

   //CALCULOS FEITOS - ARRUMAR ISSO DEPOIS !!!
   conc = (-log10((average2-average3)/y0)-lrCoef[1])/lrCoef[0];
   Serial.print(" Ozone Conc = "); Serial.print(conc);

}

<<<<< CÓDIGO REGRESSÃO LINEAR <<<<<

void simpLinReg(float* x, float* y, float* lrCoef, int n){
 // CALCULOS PARA REGRESSÃO LINEAR
 for (int k = 0; k < n; k++){
  sum_x += x[k];
  sum_y += y[k];
  sum_xy = sum_xy+x[k]*y[k];
  sum_xx = sum_xx+x[k]*x[k];
 }
 lrCoef[0] = (n*sum_xy-sum_x*sum_y)/(n*sum_xx-sum_x*sum_x);
 lrCoef[1] = (sum_y/n)-((lrCoef[0]*sum_x)/n);
}

<<<<< VOID LOOP WTF <<<<<

void loop() {
}
